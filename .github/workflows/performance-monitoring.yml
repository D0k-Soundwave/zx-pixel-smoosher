name: Performance Monitoring & Benchmarking

on:
  push:
    branches: [ master, main ]
    paths:
      - 'js/**/*.js'
      - 'css/**/*.css'
      - 'index.html'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'js/**/*.js'
      - 'css/**/*.css'
      - 'index.html'
  schedule:
    # Run performance monitoring weekly on Sundays at 4 AM UTC
    - cron: '0 4 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  pages: write
  id-token: write

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Create package.json for performance tools
      run: |
        cat > package.json << 'EOF'
        {
          "name": "zx-pixel-smoosher-performance",
          "version": "1.0.0",
          "scripts": {
            "lighthouse": "lighthouse --chrome-flags='--headless' --output=json --output=html --output-path=./reports/lighthouse",
            "serve": "python3 -m http.server 8080"
          },
          "devDependencies": {
            "lighthouse": "^11.7.1",
            "web-vitals": "^3.5.2",
            "bundlesize": "^0.18.1"
          }
        }
        EOF
        
    - name: Install performance monitoring dependencies
      run: npm install
      
    - name: Create performance test setup
      run: |
        mkdir -p reports performance-tests
        
        # Create Web Vitals measurement script
        cat > performance-tests/web-vitals-measurement.js << 'EOF'
        import { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals';
        
        const vitalsData = {
          timestamp: Date.now(),
          url: window.location.href,
          userAgent: navigator.userAgent,
          metrics: {}
        };
        
        // Measure Core Web Vitals
        getCLS((metric) => {
          vitalsData.metrics.CLS = {
            name: metric.name,
            value: metric.value,
            rating: metric.rating,
            delta: metric.delta
          };
        });
        
        getFID((metric) => {
          vitalsData.metrics.FID = {
            name: metric.name,
            value: metric.value,
            rating: metric.rating,
            delta: metric.delta
          };
        });
        
        getFCP((metric) => {
          vitalsData.metrics.FCP = {
            name: metric.name,
            value: metric.value,
            rating: metric.rating,
            delta: metric.delta
          };
        });
        
        getLCP((metric) => {
          vitalsData.metrics.LCP = {
            name: metric.name,
            value: metric.value,
            rating: metric.rating,
            delta: metric.delta
          };
        });
        
        getTTFB((metric) => {
          vitalsData.metrics.TTFB = {
            name: metric.name,
            value: metric.value,
            rating: metric.rating,
            delta: metric.delta
          };
        });
        
        // Export data for collection
        window.webVitalsData = vitalsData;
        EOF
        
        # Create ZX Spectrum performance tests
        cat > performance-tests/zx-performance-tests.js << 'EOF'
        // ZX Pixel Smoosher specific performance tests
        class ZXPerformanceMonitor {
          constructor() {
            this.metrics = {
              canvasOperations: [],
              memoryUsage: [],
              drawingPerformance: [],
              fillOperations: []
            };
            this.startTime = performance.now();
          }
          
          // Test canvas drawing performance
          async testCanvasPerformance() {
            if (!window.ZXSpectrumPixelSmasher) {
              throw new Error('ZX Pixel Smoosher not loaded');
            }
            
            const canvas = document.querySelector('canvas');
            if (!canvas) {
              throw new Error('Canvas element not found');
            }
            
            const ctx = canvas.getContext('2d');
            const iterations = 1000;
            const startTime = performance.now();
            
            // Test pixel drawing operations
            for (let i = 0; i < iterations; i++) {
              const x = Math.random() * 256;
              const y = Math.random() * 192;
              ctx.fillStyle = `rgb(${Math.floor(Math.random() * 256)}, 0, 0)`;
              ctx.fillRect(Math.floor(x), Math.floor(y), 1, 1);
            }
            
            const endTime = performance.now();
            const avgTime = (endTime - startTime) / iterations;
            
            this.metrics.canvasOperations.push({
              operation: 'pixel_drawing',
              iterations: iterations,
              totalTime: endTime - startTime,
              averageTime: avgTime,
              pixelsPerSecond: 1000 / avgTime * 1000
            });
            
            return avgTime;
          }
          
          // Test memory usage during operations
          testMemoryUsage() {
            if (performance.memory) {
              this.metrics.memoryUsage.push({
                timestamp: Date.now(),
                usedJSHeapSize: performance.memory.usedJSHeapSize,
                totalJSHeapSize: performance.memory.totalJSHeapSize,
                jsHeapSizeLimit: performance.memory.jsHeapSizeLimit
              });
            }
          }
          
          // Test shape generation performance
          async testShapeGeneration() {
            if (!window.ShapeGenerator) {
              console.warn('ShapeGenerator not available');
              return;
            }
            
            const shapes = ['circle', 'rectangle', 'line', 'triangle'];
            const results = [];
            
            for (const shape of shapes) {
              const startTime = performance.now();
              const iterations = 100;
              
              for (let i = 0; i < iterations; i++) {
                // Simulate shape generation
                if (window.ShapeGenerator && window.ShapeGenerator.generateShape) {
                  try {
                    window.ShapeGenerator.generateShape(shape, {
                      startX: Math.random() * 256,
                      startY: Math.random() * 192,
                      endX: Math.random() * 256,
                      endY: Math.random() * 192
                    });
                  } catch (e) {
                    // Shape generation might require specific parameters
                    console.warn('Shape generation failed:', e.message);
                  }
                }
              }
              
              const endTime = performance.now();
              results.push({
                shape: shape,
                iterations: iterations,
                totalTime: endTime - startTime,
                averageTime: (endTime - startTime) / iterations
              });
            }
            
            this.metrics.drawingPerformance = results;
            return results;
          }
          
          // Generate performance report
          generateReport() {
            return {
              testDuration: performance.now() - this.startTime,
              timestamp: new Date().toISOString(),
              metrics: this.metrics,
              browser: {
                userAgent: navigator.userAgent,
                vendor: navigator.vendor,
                platform: navigator.platform
              },
              performance: {
                navigation: performance.getEntriesByType('navigation')[0],
                timing: performance.timing
              }
            };
          }
        }
        
        // Export for use in tests
        window.ZXPerformanceMonitor = ZXPerformanceMonitor;
        EOF
        
    - name: Start local server
      run: python3 -m http.server 8080 &
      
    - name: Wait for server to start
      run: sleep 3
      
    - name: Run Lighthouse audit
      run: |
        npx lighthouse http://localhost:8080 \
          --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
          --output=json \
          --output=html \
          --output-path=./reports/lighthouse-report \
          --preset=desktop \
          --throttling-method=devtools \
          --form-factor=desktop \
          --screenEmulation.disabled=true
          
    - name: Create bundle size analysis
      run: |
        # Analyze JavaScript file sizes
        echo "# Bundle Size Analysis" > reports/bundle-analysis.md
        echo "**Analysis Date:** $(date)" >> reports/bundle-analysis.md
        echo "" >> reports/bundle-analysis.md
        
        echo "## JavaScript Files" >> reports/bundle-analysis.md
        find js/ -name "*.js" -exec wc -c {} + | while read size file; do
          if [ "$file" != "total" ]; then
            kb_size=$(echo "scale=2; $size / 1024" | bc)
            echo "- **$file**: ${kb_size}KB (${size} bytes)" >> reports/bundle-analysis.md
          fi
        done
        
        echo "" >> reports/bundle-analysis.md
        echo "## CSS Files" >> reports/bundle-analysis.md
        find css/ -name "*.css" -exec wc -c {} + | while read size file; do
          if [ "$file" != "total" ]; then
            kb_size=$(echo "scale=2; $size / 1024" | bc)
            echo "- **$file**: ${kb_size}KB (${size} bytes)" >> reports/bundle-analysis.md
          fi
        done
        
        echo "" >> reports/bundle-analysis.md
        echo "## Total Application Size" >> reports/bundle-analysis.md
        total_js=$(find js/ -name "*.js" -exec wc -c {} + | tail -n1 | awk '{print $1}')
        total_css=$(find css/ -name "*.css" -exec wc -c {} + | tail -n1 | awk '{print $1}')
        total_html=$(wc -c < index.html)
        total_size=$((total_js + total_css + total_html))
        total_kb=$(echo "scale=2; $total_size / 1024" | bc)
        echo "- **Total Size**: ${total_kb}KB (${total_size} bytes)" >> reports/bundle-analysis.md
        
    - name: Run ZX Spectrum specific performance tests
      run: |
        # Create comprehensive performance test
        cat > performance-tests/run-zx-tests.js << 'EOF'
        const puppeteer = require('puppeteer');
        const fs = require('fs');
        
        (async () => {
          const browser = await puppeteer.launch({
            headless: 'new',
            args: ['--no-sandbox', '--disable-dev-shm-usage']
          });
          
          const page = await browser.newPage();
          
          // Set viewport to ZX Spectrum resolution for authentic testing
          await page.setViewport({ width: 256 * 3, height: 192 * 3 });
          
          // Navigate to the application
          await page.goto('http://localhost:8080', { waitUntil: 'networkidle0' });
          
          // Wait for application to load
          await page.waitForFunction(() => window.ZXSpectrumPixelSmasher !== undefined, { timeout: 10000 });
          
          // Inject performance monitoring
          await page.addScriptTag({ path: './performance-tests/zx-performance-tests.js' });
          
          // Run performance tests
          const results = await page.evaluate(async () => {
            const monitor = new window.ZXPerformanceMonitor();
            
            // Test canvas performance
            const canvasPerf = await monitor.testCanvasPerformance();
            
            // Test memory usage
            monitor.testMemoryUsage();
            
            // Test shape generation
            await monitor.testShapeGeneration();
            
            // Wait a bit for more memory measurements
            await new Promise(resolve => setTimeout(resolve, 1000));
            monitor.testMemoryUsage();
            
            return monitor.generateReport();
          });
          
          // Save results
          fs.writeFileSync('./reports/zx-performance-results.json', JSON.stringify(results, null, 2));
          
          await browser.close();
        })();
        EOF
        
        npm install puppeteer
        node performance-tests/run-zx-tests.js
        
    - name: Generate performance summary report
      run: |
        cat > reports/performance-summary.md << 'EOF'
        # ZX Pixel Smoosher - Performance Monitoring Report
        
        **Report Generated:** $(date)
        **Commit SHA:** ${{ github.sha }}
        **Branch:** ${{ github.ref_name }}
        
        ## Performance Summary
        
        ### Lighthouse Scores
        EOF
        
        # Extract Lighthouse scores
        if [ -f "reports/lighthouse-report.json" ]; then
          node -e "
            const report = JSON.parse(require('fs').readFileSync('reports/lighthouse-report.json'));
            const scores = report.lhr.categories;
            console.log('- **Performance:** ' + Math.round(scores.performance.score * 100) + '/100');
            console.log('- **Accessibility:** ' + Math.round(scores.accessibility.score * 100) + '/100');
            console.log('- **Best Practices:** ' + Math.round(scores['best-practices'].score * 100) + '/100');
            console.log('- **SEO:** ' + Math.round(scores.seo.score * 100) + '/100');
          " >> reports/performance-summary.md
        fi
        
        echo "" >> reports/performance-summary.md
        echo "### ZX Spectrum Specific Metrics" >> reports/performance-summary.md
        
        # Extract ZX performance results
        if [ -f "reports/zx-performance-results.json" ]; then
          node -e "
            const results = JSON.parse(require('fs').readFileSync('reports/zx-performance-results.json'));
            if (results.metrics.canvasOperations.length > 0) {
              const canvasOp = results.metrics.canvasOperations[0];
              console.log('- **Canvas Drawing Speed:** ' + Math.round(canvasOp.pixelsPerSecond) + ' pixels/second');
              console.log('- **Average Draw Time:** ' + canvasOp.averageTime.toFixed(3) + 'ms per pixel');
            }
            if (results.metrics.memoryUsage.length > 0) {
              const memory = results.metrics.memoryUsage[results.metrics.memoryUsage.length - 1];
              console.log('- **Memory Usage:** ' + Math.round(memory.usedJSHeapSize / 1024 / 1024) + 'MB');
            }
          " >> reports/performance-summary.md
        fi
        
        echo "" >> reports/performance-summary.md
        cat reports/bundle-analysis.md >> reports/performance-summary.md
        
    - name: Performance threshold validation
      run: |
        # Validate performance meets minimum thresholds
        echo "🔍 Validating performance thresholds..."
        
        LIGHTHOUSE_THRESHOLD=80
        BUNDLE_SIZE_THRESHOLD=500  # KB
        
        # Check Lighthouse performance score
        if [ -f "reports/lighthouse-report.json" ]; then
          PERF_SCORE=$(node -e "console.log(Math.round(JSON.parse(require('fs').readFileSync('reports/lighthouse-report.json')).lhr.categories.performance.score * 100))")
          echo "Lighthouse Performance Score: $PERF_SCORE/100"
          
          if [ "$PERF_SCORE" -lt "$LIGHTHOUSE_THRESHOLD" ]; then
            echo "❌ Performance score ($PERF_SCORE) below threshold ($LIGHTHOUSE_THRESHOLD)"
            echo "performance_threshold=failed" >> $GITHUB_OUTPUT
          else
            echo "✅ Performance score meets threshold"
            echo "performance_threshold=passed" >> $GITHUB_OUTPUT
          fi
        fi
        
        # Check bundle size
        TOTAL_SIZE=$(find js/ css/ -name "*.js" -o -name "*.css" | xargs wc -c | tail -n1 | awk '{print $1}')
        TOTAL_KB=$((TOTAL_SIZE / 1024))
        echo "Total Bundle Size: ${TOTAL_KB}KB"
        
        if [ "$TOTAL_KB" -gt "$BUNDLE_SIZE_THRESHOLD" ]; then
          echo "❌ Bundle size (${TOTAL_KB}KB) exceeds threshold (${BUNDLE_SIZE_THRESHOLD}KB)"
          echo "bundle_threshold=failed" >> $GITHUB_OUTPUT
        else
          echo "✅ Bundle size within threshold"
          echo "bundle_threshold=passed" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload performance reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: |
          reports/
        retention-days: 90
        
    - name: Comment performance results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const summary = fs.readFileSync('reports/performance-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 🚀 Performance Monitoring Results\n\n' + summary
            });
          } catch (error) {
            console.log('Could not read performance summary');
          }
          
    - name: Update performance baseline
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
      run: |
        # Store current performance metrics as baseline for future comparisons
        mkdir -p .github/performance-baselines
        
        if [ -f "reports/lighthouse-report.json" ]; then
          cp reports/lighthouse-report.json .github/performance-baselines/lighthouse-baseline.json
        fi
        
        if [ -f "reports/zx-performance-results.json" ]; then
          cp reports/zx-performance-results.json .github/performance-baselines/zx-baseline.json
        fi
        
        echo "Performance baseline updated for commit ${{ github.sha }}" > .github/performance-baselines/baseline-info.txt
        echo "Date: $(date)" >> .github/performance-baselines/baseline-info.txt